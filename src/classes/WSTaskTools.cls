/**********************************************************************
* Name:     WSTaskTools
* Author:   World-Class Industrial Network, LLC (www.winnets.com / support@winnets.com)
* Date:     15 November 2015
* ======================================================
* ======================================================
* Purpose:                                                            
* A set of methods which operate on the task. Includes:
* 	IntegraParser - A method to parse the comment field on a task which is generated by the Integra integration.
*					Takes a list of tasks after the task have been inserted. Runs from After Insert on WSTaskTrigger.
* ======================================================
* ======================================================
* History:                                                            
* VERSION   DATE            INITIALS    DESCRIPTION/FEATURES ADDED
* 1.0       15 Nov 2015     TGM         Initial Development
***********************************************************************/

global class WSTaskTools {

	public static void ResetBypass(Set<Id> tskids){

		List<Task> tasks = new List<Task>();
		List<Task> tupdates = new List<Task>();

		tasks = [SELECT Id, ByPassValidations__c FROM Task WHERE Id IN: tskids];

		if(!tasks.isEmpty()){
			for(Task t : tasks){

				if(t.ByPassValidations__c == TRUE){
					t.ByPassValidations__c = FALSE;
					tupdates.add(t);
				}
			}
		}

		if(!tupdates.isEmpty()){
			try{
				update tupdates;
			}
			catch(Exception e){
				system.debug('*********************ERROR RESETTING TASK BYPASS VALIDATIONS' + e);
			}
		}
	}

	public static void IntegraParser(List<task> lsttsk) {

		List<Task> lstup = new List<Task>(); // A list of tasks to update

		String regexPhone; //A string to hold the regex pattern for the Phone
		String regexStart; //A string to hold the regex pattern for the Start Time
		String regexEnd; //A string to hold the regex patteen for the End Time

		String tempPhone; //A temp variable for the string version of the Phone line
		String tempStart; //A temp variable for the string version of the Start Time line
		String tempEnd; //A temp variable for the string version of the End Time line

		String stempDate; //The date portion of the Start Date Time
		String stempTime; //The time portion of the Start Date Time
		String stAMPM; //The AM/PM portion of the Start Date Time

		String etempDate; //The date portion of the End Date Time
		String etempTime; //The time portion of the End Date Time
		String etAMPM; //The AM/PM portion of the End Date Time

		String phone; //The phone as a phone
		DateTime startDateTime; //The Start Time as a Date Time
		DateTime endDateTime; //The End Time as a Date Time

		regexPhone = '(?m)^\\s*DDI/DID\\s*:\\s+(.*)$'; //The regex pattern for the Phone
		regexStart = '(?m)^\\s*Start Time\\s*:\\s+(.*)$'; //The regex pattern for the Start Time
		regexEnd = '(?m)^\\s*End Time\\s*:\\s+(.*)$'; //The regex pattern for the End Time

		Pattern pPhone = Pattern.compile(regexPhone); //Create and compile the Phone Pattern
		Pattern pStart = Pattern.compile(regexStart); //Create and compile the Start Time Pattern
		Pattern pEnd = Pattern.compile(regexEnd); //Create and compile the End Time Pattern

		for(Task t : lsttsk){ //Start Loop

			List<String> phoneparts = new List<String>(); //A list of phone string parts
			List<String> startparts = new List<String>(); //A list of start time parts
			List<String> endparts = new List<String>(); //A list of end time parts

			Matcher mPhone = pPhone.matcher(t.Description); //The Matcher for the phone
			Matcher mStart = pStart.matcher(t.Description); //The Matcher for the start time
			Matcher mEnd = pEnd.matcher(t.Description); //The Matcher for the end time

			//Start Time : 10/29/2015 5:00:40 PM 
		 	//End Time : 10/29/2015 5:01:35 PM
		 	//DDI/DID: (541) 306-1897
		 	//newInstance(year, month, day, hour, minute, second)
		 	//Integer.valueOf


			if(mPhone.find()){ //If the Phone Pattern is Found do something
				
				tempPhone = mPhone.group(0); //Grab the Phone data as a string

				if(tempPhone != 'DDI/DID DDI Name/DNIS: ' && tempPhone != 'DDI Name/DNIS:' && tempPhone != 'DDI' && tempPhone != 'DDI/DID:'){ //Make sure there was a DDI/DID value

					phoneparts = tempPhone.split(' '); //Split the Phone Line into parts
					phone = phoneparts[1]; //Get the parts for Area Code and Phone Number

					System.debug('phone = ' + phone);

					if(phone.trim() != 'DDI'){

						t.Phone_c__c = phone; //Set the standard Phone field on the task
					}
					else{
						t.Phone_c__c = NULL;
					}
				}
		
			}

			if(mStart.find()){ //If the Start Time Pattern is Found do something
				//Start Time : 10/29/2015 5:00:40 PM

				tempStart = mStart.group(0); //Grab the Start Time data as a string

				startparts = tempStart.split(' '); //Split the Start Time into parts

				stempDate = startparts[3]; //Get the date part
				stempTime = startparts[4].left(startparts[4].length()-3); //Get the time part
				stAMPM = startparts[5];  //Get the AM/PM part

				startDateTime = DateTime.parse(stempDate + ' ' + stempTime + ' ' + stAMPM); //Convert to Date Time

				t.Call_Start__c = startDateTime; //Set the custom Start Date field on the task
			}

			if(mEnd.find()){ //If the End Time Pattern is Found do something
				//End Time : 10/29/2015 5:01:35 PM

				tempEnd = mEnd.group(0); //Grab the End Time as a String

				endparts = tempEnd.split(' '); //Split the End Time into parts

				etempDate = endparts[3]; //Get the date part
				etempTime = endparts[4].left(endparts[4].length()-3); //Get the time part
				etAMPM = endparts[5]; //Get the AM/PM part

				endDateTime = DateTime.parse(etempDate + ' ' + etempTime + ' ' + etAMPM); //Convert to Date Time

				t.Call_End__c = endDateTime; //Set the custom End Date field on the task
			}

			//if(mPhone.find() || mStart.find() || mEnd.find()){  //Add the task to the list to update if any pattern was found
				//lstup.add(t);
			//}

		}//End Loop

		//if(!lstup.isEmpty()){ //Do something if the list to update is not empty

			//try{
				//update lstup;  //Update the list of tasks
			//}
			//catch(Exception e){
				//System.debug('The following exception has occurred while trying to update Integra Tasks: ' + e.getMessage());
			//}
		//}

	}//End IntegraParser

}//End WSTaskTools